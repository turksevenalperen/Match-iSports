import { NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth"
import { prisma } from "@/lib/prisma"

export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: "GiriÅŸ yapmanÄ±z gerekiyor" },
        { status: 401 }
      )
    }

    const { targetTeamId, message } = await request.json()

    if (!targetTeamId) {
      return NextResponse.json(
        { error: "Hedef takÄ±m ID'si gerekli" },
        { status: 400 }
      )
    }

    // Kendine istek gÃ¶ndermeyi engelle
    if (targetTeamId === session.user.id) {
      return NextResponse.json(
        { error: "Kendi takÄ±mÄ±nÄ±za istek gÃ¶nderemezsiniz" },
        { status: 400 }
      )
    }

    // Daha Ã¶nce istek gÃ¶nderilip gÃ¶nderilmediÄŸini kontrol et
    const existingRequest = await prisma.teamRequest.findFirst({
      where: {
        senderId: session.user.id,
        receiverId: targetTeamId,
        status: "PENDING"
      }
    })

    if (existingRequest) {
      return NextResponse.json(
        { error: "Bu takÄ±ma zaten bir istek gÃ¶nderdiniz" },
        { status: 400 }
      )
    }

    // Hedef takÄ±mÄ±n var olup olmadÄ±ÄŸÄ±nÄ± kontrol et
    const targetTeam = await prisma.user.findUnique({
      where: { id: targetTeamId },
      select: { id: true, teamName: true }
    })

    if (!targetTeam) {
      return NextResponse.json(
        { error: "Hedef takÄ±m bulunamadÄ±" },
        { status: 404 }
      )
    }

    // Ä°steÄŸi oluÅŸtur
    const teamRequest = await prisma.teamRequest.create({
      data: {
        senderId: session.user.id,
        receiverId: targetTeamId,
        message: message || "Merhaba! Sizinle bir hazÄ±rlÄ±k maÃ§Ä± yapmak istiyoruz.",
        status: "PENDING"
      },
      include: {
        sender: {
          select: {
            id: true,
            teamName: true,
            city: true,
            sport: true,
            rating: true,
            logo: true
          }
        },
        receiver: {
          select: {
            id: true,
            teamName: true
          }
        }
      }
    })

    // GÃ¶nderen iÃ§in aktivite oluÅŸtur
    await prisma.activity.create({
      data: {
        userId: session.user.id,
        type: 'REQUEST_SENT',
        title: 'MaÃ§ Ä°steÄŸi GÃ¶nderildi',
        description: `${targetTeam.teamName} takÄ±mÄ±na maÃ§ isteÄŸi gÃ¶nderdiniz`,
        metadata: {
          targetTeamName: targetTeam.teamName,
          requestId: teamRequest.id
        }
      }
    })

    // AlÄ±cÄ± iÃ§in aktivite oluÅŸtur (bildirim)
    await prisma.activity.create({
      data: {
        userId: targetTeamId,
        type: 'REQUEST_RECEIVED',
        title: 'Yeni MaÃ§ Ä°steÄŸi! ğŸ“¬',
        description: `${teamRequest.sender.teamName} takÄ±mÄ±ndan maÃ§ isteÄŸi aldÄ±nÄ±z`,
        metadata: {
          senderTeamName: teamRequest.sender.teamName,
          requestId: teamRequest.id
        }
      }
    })

    return NextResponse.json({
      message: "Ä°stek baÅŸarÄ±yla gÃ¶nderildi",
      request: teamRequest
    })

  } catch (error) {
    console.error("Team request error:", error)
    return NextResponse.json(
      { error: "Bir hata oluÅŸtu" },
      { status: 500 }
    )
  }
}
